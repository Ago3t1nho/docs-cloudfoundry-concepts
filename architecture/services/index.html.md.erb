---
title: Services
---
There are two ways that Cloud Foundry enables developers to add services to their applications: [Managed Services](#managed) and [User-provided Service Instances](#user-provided). Managed services are integrated with Cloud Foundry via APIs and provision new service instances and credentials on demand. User-provided service instances are a mechanism to deliver credentials to applications for service instances which have been pre-provisioned outside of Cloud Foundry.

## <a id='managed'></a>Managed Services ##

Services are integrated with Cloud Foundry by implementing a documented API for which the cloud controller is the client; we call this the Service Broker API. This should not be confused with the Cloud Controller API, often used to refer to the version of Cloud Foundry itself. "Cloud Foundry v2" refers to the version of the Cloud Controller API. The Service Broker API is versioned independently of the Cloud Controller API.

Service broker refers to a component of the service that implements the Service Broker API. This component was formerly referred to as a service gateway. However, as traffic between applications and services does not flow through the broker, we found the term "gateway" caused confusion. Although gateway still appears in old code, we use the term "broker" in conversation and in new code. We are updating the documentation to reflect the change.

In general, service brokers advertise a catalog of service offerings and service plans to Cloud Foundry, and receive calls from Cloud Foundry for five functions: fetch catalog, create, bind, unbind, and delete. What a broker does with each call can vary between services. In general, `create` reserves resources on a service and `bind` delivers information to an application necessary for accessing the resource. We call the reserved resource a service instance. What a service instance represents can vary by service; it could be a single database on a multi-tenant server, a dedicated cluster, or even just an account on a web application.

### <a id='architecture'></a>Service Architecture ###

How a service is implemented is up to the service provider/developer. Cloud Foundry only requires that the service provider implement the service broker API. A broker can be implemented as a separate application, or by adding the required http endpoints to an existing service.

Because Cloud Foundry only requires that a service implement the broker API in order to be available to Cloud Foundry end users, many deployment models are possible. The following are examples of valid deployment models:

* Entire service packaged and deployed by BOSH alongside Cloud Foundry
* Broker packaged and deployed by BOSH alongside Cloud Foundry; rest of the service deployed and maintained by other means
* Broker (and optionally service) pushed as an application to Cloud Foundry user space
* Entire service, including broker, deployed and maintained outside of Cloud Foundry by other means

### <a id='api'></a>Service Broker API ###

The current major version of the Service Broker API is v2. Brokers that implement the v2 API are referred to as v2 brokers. All changes to the v2 API will be additive and optional. We will not remove any endpoints or fields until the next major version.

* [Writing a Cloud Foundry Service Broker](writing-service.html)
* [An example service broker](https://github.com/cloudfoundry/cf-mysql-broker)

Cloud Foundry currently supports both v2 brokers and v1 brokers, but support for v1 brokers will be removed from the next major version of the Cloud Controller. Although there is no timeline for that release, we recommend that you implement new brokers with the v2 Services API and upgrade existing brokers. For reference, see the [v1 Service Broker API](writing-service-v1.html).

## <a id='user-provided'></a>User-provided Service Instances ##

Both operators and developers frequently ask how applications pushed to their Cloud Foundry instances can bind with external services, such as Oracle, that they operate themselves or that are outside Cloud Foundry's control. [User-provided Service Instances] enable developers to use external services with their applications using familiar workflows.
